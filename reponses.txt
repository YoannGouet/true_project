Réponses aux question de la partie UML : 

- A quoi sert la classe AbstractRunChat ?
definir la partie comune pour lancer le seveur ou les clients


- Expliquez la relation ChatServer / InputOutputClient concrétisée par l’attribut « clients ».
InputOutputClient est la classe qui cotient les info d'un client et les fontion pour comuniquer avec celui ci les inctances de cette classe sont referencée dans ChatServer par un vecteur. la dispation de ChatServer entraine la disparition des InputOutputClient donc une composition.

- Expliquez la relation ClientHandler / InputClient concrétisée par l’attribut « mainClient ».
un ClientHandler est lancer a chaque nouveaux client il possède une instance InputClient mainClient qui est le client dont il gere la comunication avec le serveur

- Expliquez la relation ClientHandler / InputOutputClient concrétisée par l’attribut « allClients ».
l'emsemble des instances InputOutputClient des clients connecter sont dans le vector allClients de ClientHandler pour transmetre les message de mainClient


- Combien de threads tournent sur un serveur dans le scénario présenté par la Figure 1 (page 1) ? 2
  Détaillez votre réponse en précisant qui lance qui.
run() recoit client 1 est creer un Thread(handler) handler de client1
run() recoit client 2 est creer un Thread(handler) handler de client2


- Combien de threads tournent dans le Client 1 du scénario présenté par la Figure 1 (page 1) ? 2
  Détaillez votre réponse en précisant qui lance qui.
run() lance deux Thread : Thread(userHandler); Thread(serverHandler);


- A quoi sert le threads[i].join() à la fin du run de ChatClient ?
threads[i].join() fait atendre a ChatClient la fin des deux thread

- Que représente la classe ChatClient dans le cadre d’une architecture MVC ?
ChatClient est le controleur

